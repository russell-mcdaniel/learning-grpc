// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Learning.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Learning.Grpc {
  public static partial class Adder
  {
    static readonly string __ServiceName = "Learning.Grpc.Adder";

    static readonly grpc::Marshaller<global::Learning.Grpc.Number> __Marshaller_Learning_Grpc_Number = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Learning.Grpc.Number.Parser.ParseFrom);

    static readonly grpc::Method<global::Learning.Grpc.Number, global::Learning.Grpc.Number> __Method_AddSimple = new grpc::Method<global::Learning.Grpc.Number, global::Learning.Grpc.Number>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddSimple",
        __Marshaller_Learning_Grpc_Number,
        __Marshaller_Learning_Grpc_Number);

    static readonly grpc::Method<global::Learning.Grpc.Number, global::Learning.Grpc.Number> __Method_AddServerStream = new grpc::Method<global::Learning.Grpc.Number, global::Learning.Grpc.Number>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "AddServerStream",
        __Marshaller_Learning_Grpc_Number,
        __Marshaller_Learning_Grpc_Number);

    static readonly grpc::Method<global::Learning.Grpc.Number, global::Learning.Grpc.Number> __Method_AddClientStream = new grpc::Method<global::Learning.Grpc.Number, global::Learning.Grpc.Number>(
        grpc::MethodType.ClientStreaming,
        __ServiceName,
        "AddClientStream",
        __Marshaller_Learning_Grpc_Number,
        __Marshaller_Learning_Grpc_Number);

    static readonly grpc::Method<global::Learning.Grpc.Number, global::Learning.Grpc.Number> __Method_AddBidirectional = new grpc::Method<global::Learning.Grpc.Number, global::Learning.Grpc.Number>(
        grpc::MethodType.DuplexStreaming,
        __ServiceName,
        "AddBidirectional",
        __Marshaller_Learning_Grpc_Number,
        __Marshaller_Learning_Grpc_Number);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Learning.Grpc.LearningReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Adder</summary>
    public abstract partial class AdderBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Learning.Grpc.Number> AddSimple(global::Learning.Grpc.Number request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task AddServerStream(global::Learning.Grpc.Number request, grpc::IServerStreamWriter<global::Learning.Grpc.Number> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Learning.Grpc.Number> AddClientStream(grpc::IAsyncStreamReader<global::Learning.Grpc.Number> requestStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task AddBidirectional(grpc::IAsyncStreamReader<global::Learning.Grpc.Number> requestStream, grpc::IServerStreamWriter<global::Learning.Grpc.Number> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Adder</summary>
    public partial class AdderClient : grpc::ClientBase<AdderClient>
    {
      /// <summary>Creates a new client for Adder</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public AdderClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Adder that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public AdderClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected AdderClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected AdderClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Learning.Grpc.Number AddSimple(global::Learning.Grpc.Number request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddSimple(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Learning.Grpc.Number AddSimple(global::Learning.Grpc.Number request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddSimple, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Learning.Grpc.Number> AddSimpleAsync(global::Learning.Grpc.Number request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddSimpleAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Learning.Grpc.Number> AddSimpleAsync(global::Learning.Grpc.Number request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddSimple, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::Learning.Grpc.Number> AddServerStream(global::Learning.Grpc.Number request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddServerStream(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::Learning.Grpc.Number> AddServerStream(global::Learning.Grpc.Number request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_AddServerStream, null, options, request);
      }
      public virtual grpc::AsyncClientStreamingCall<global::Learning.Grpc.Number, global::Learning.Grpc.Number> AddClientStream(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddClientStream(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncClientStreamingCall<global::Learning.Grpc.Number, global::Learning.Grpc.Number> AddClientStream(grpc::CallOptions options)
      {
        return CallInvoker.AsyncClientStreamingCall(__Method_AddClientStream, null, options);
      }
      public virtual grpc::AsyncDuplexStreamingCall<global::Learning.Grpc.Number, global::Learning.Grpc.Number> AddBidirectional(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddBidirectional(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncDuplexStreamingCall<global::Learning.Grpc.Number, global::Learning.Grpc.Number> AddBidirectional(grpc::CallOptions options)
      {
        return CallInvoker.AsyncDuplexStreamingCall(__Method_AddBidirectional, null, options);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override AdderClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new AdderClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(AdderBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_AddSimple, serviceImpl.AddSimple)
          .AddMethod(__Method_AddServerStream, serviceImpl.AddServerStream)
          .AddMethod(__Method_AddClientStream, serviceImpl.AddClientStream)
          .AddMethod(__Method_AddBidirectional, serviceImpl.AddBidirectional).Build();
    }

  }
}
#endregion
